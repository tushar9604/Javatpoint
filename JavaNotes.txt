Java Notes
A list of most important features of Java language is given below.
Simple
Object-Oriented
Portable
Platform independent
Secured
Robust
Architecture neutral
Interpreted
High Performance
Multithreaded
Distributed
Dynamic

Basic concepts of OOPs are:
1. Objects
2. Class
3. Inheritance
4. Polymorphism
5. Abstraction
6. Encapsulation

Platform independent: Java code can be run on multiple platforms, for example, Windows, Linux, Sun Solaris, Mac/OS, etc. Java code is compiled by the compiler and converted into bytecode. This bytecode is a platform-independent code because it can be run on multiple platforms, i.e., Write Once and Run Anywhere(WORA)

Secured

Java is best known for its security. With Java, we can develop virus-free systems. Java is secured because:

    No explicit pointer
    Java Programs run inside a virtual machine sandbox

    Classloader: Classloader in Java is a part of the Java Runtime Environment(JRE) which is used to load Java classes into the Java Virtual Machine dynamically. It adds security by separating the package for the classes of the local file system from those that are imported from network sources.
    Bytecode Verifier: It checks the code fragments for illegal code that can violate access right to objects.
    Security Manager: It determines what resources a class can access such as reading and writing to the local disk.

Java language provides these securities by default. Some security can also be provided by an application developer explicitly through SSL, JAAS, Cryptography, etc.

Robust

Robust simply means strong. Java is robust because:

    It uses strong memory management.
    There is a lack of pointers that avoids security problems.
    There is automatic garbage collection in java which runs on the Java Virtual Machine to get rid of objects which are not being used by a Java application anymore.
    There are exception handling and the type checking mechanism in Java. All these points make Java robust.

Architecture-neutral

Java is architecture neutral because there are no implementation dependent features, for example, the size of primitive types is fixed.

In C programming, int data type occupies 2 bytes of memory for 32-bit architecture and 4 bytes of memory for 64-bit architecture. However, it occupies 4 bytes of memory for both 32 and 64-bit architectures in Java.

Portable

Java is portable because it facilitates you to carry the Java bytecode to any platform. It doesn't require any implementation. 

High-performance

Java is faster than other traditional interpreted programming languages because Java bytecode is "close" to native code. It is still a little bit slower than a compiled language (e.g., C++). Java is an interpreted language that is why it is slower than compiled languages, e.g., C, C++, etc.


Distributed

Java is distributed because it facilitates users to create distributed applications in Java. RMI and EJB are used for creating distributed applications. This feature of Java makes us able to access files by calling the methods from any machine on the internet.
Multi-threaded

A thread is like a separate program, executing concurrently. We can write Java programs that deal with many tasks at once by defining multiple threads. The main advantage of multi-threading is that it doesn't occupy memory for each thread. It shares a common memory area. Threads are important for multi-media, Web applications, etc.
Dynamic

Java is a dynamic language. It supports dynamic loading of classes. It means classes are loaded on demand. It also supports functions from its native languages, i.e., C and C++.

Java supports dynamic compilation and automatic memory management (garbage collection).

Data Types in Java

Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java:

    Primitive data types: The primitive data types include boolean, char, byte, short, int, long, float and double.
    Non-primitive data types: The non-primitive data types include Classes, Interfaces, and Arrays.

Data Type 	Default Value 	Default size
boolean 	false 	1 bit
char 	'\u0000' 	2 byte
byte 	0 	1 byte
short 	0 	2 byte
int 	0 	4 byte
long 	0L 	8 byte
float 	0.0f 	4 byte
double 	0.0d 	8 byte

Operator in Java is a symbol which is used to perform operations. For example: +, -, *, / etc.

There are many types of operators in Java which are given below:

    Unary Operator,
    Arithmetic Operator,
    Shift Operator,
    Relational Operator,
    Bitwise Operator,
    Logical Operator,
    Ternary Operator and
    Assignment Operator.
	
Java keywords:
1. abstract
2. boolean
3. break
4. byte
5. case
6. catch
7. char
8. class
9. continue
10. default
11. do
12. double
13. else
14. enum
15. extends
16. final
17. finally
18. float
19. for 
20. if 
21. implements
22. import
23. instanceof
24. int
25. interface
26. long
27. native
28. new
29. null
30. package
31. private
32. protected
33. public
34. return
35. short
36. static
37. strictfp
38. super
39. switch
40. synchronized
41. this
42. throw
43. throws
44. transient
45. try
46. void
47. volatile
48. while	


Java OOPs Concepts

OOPs (Object-Oriented Programming System)

Object means a real-world entity such as a pen, chair, table, computer, watch, etc. Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. It simplifies software development and maintenance by providing some concepts:

    Object
    Class
    Inheritance
    Polymorphism
    Abstraction
    Encapsulation

Apart from these concepts, there are some other terms which are used in Object-Oriented design:

    Coupling
    Cohesion
    Association
    Aggregation
    Composition

Java Naming conventions

Java naming convention is a rule to follow as you decide what to name your identifiers such as class, package, variable, constant, method, etc.

Class

    It should start with the uppercase letter.
    It should be a noun such as Color, Button, System, Thread, etc.
    Use appropriate words, instead of acronyms.
	
	
Interface

    It should start with the uppercase letter.
    It should be an adjective such as Runnable, Remote, ActionListener.
    Use appropriate words, instead of acronyms.	
	
Method

    It should start with lowercase letter.
    It should be a verb such as main(), print(), println().
    If the name contains multiple words, start it with a lowercase letter followed by an uppercase letter such as actionPerformed(). 	
	
Variable

    It should start with a lowercase letter such as id, name.
    It should not start with the special characters like & (ampersand), $ (dollar), _ (underscore).
    If the name contains multiple words, start it with the lowercase letter followed by an uppercase letter such as firstName, lastName.
    Avoid using one-character variables such as x, y, z.	
	
Package

    It should be a lowercase letter such as java, lang.
    If the name contains multiple words, it should be separated by dots (.) such as java.util, java.lang.	
	
Constant

    It should be in uppercase letters such as RED, YELLOW.
    If the name contains multiple words, it should be separated by an underscore(_) such as MAX_PRIORITY.
    It may contain digits but not as the first letter.	
	
	
There are many ways to create an object in java. They are:

    By new keyword
    By newInstance() method
    By clone() method
    By deserialization
    By factory method etc.
	
	
Anonymous object

Anonymous simply means nameless. An object which has no reference is known as an anonymous object. It can be used at the time of object creation only.	

Rules for creating Java constructor

There are two rules defined for the constructor.

    Constructor name must be the same as its class name
    A Constructor must have no explicit return type
    A Java constructor cannot be abstract, static, final, and synchronized

Restrictions for the static method

There are two main restrictions for the static method. They are:

    The static method can not use non static data member or call non-static method directly.
    this and super cannot be used in static context.

Q) Why is the Java main method static?

Ans) It is because the object is not required to call a static method. If it were a non-static method, JVM creates an object first then call main() method that will lead the problem of extra memory allocation.	

Usage of java this keyword

Here is given the 6 usage of java this keyword.

    this can be used to refer current class instance variable.
    this can be used to invoke current class method (implicitly)
    this() can be used to invoke current class constructor.
    this can be passed as an argument in the method call.
    this can be passed as argument in the constructor call.
    this can be used to return the current class instance from the method.

Rule: Call to this() must be the first statement in constructor.

Method Overloading in Java

    Different ways to overload the method
    By changing the no. of arguments
    By changing the datatype
    Why method overloading is not possible by changing the return type
    Can we overload the main method
    method overloading with Type Promotion

If a class has multiple methods having same name but different in parameters, it is known as Method Overloading.

If we have to perform only one operation, having same name of the methods increases the readability of the program. 

Advantage of method overloading

Method overloading increases the readability of the program.
Different ways to overload the method

There are two ways to overload the method in java

    By changing number of arguments
    By changing the data type

 Can we overload java main() method?

Yes, by method overloading. You can have any number of main methods in a class by method overloading. But JVM calls main() method which receives string array as arguments only. 	

Method Overriding in Java

    Understanding the problem without method overriding
    Can we override the static method
    Method overloading vs. method overriding

If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.

In other words, If a subclass provides the specific implementation of the method that has been declared by one of its parent class, it is known as method overriding.
Usage of Java Method Overriding

    Method overriding is used to provide the specific implementation of a method which is already provided by its superclass.
    Method overriding is used for runtime polymorphism

Rules for Java Method Overriding

    The method must have the same name as in the parent class
    The method must have the same parameter as in the parent class.
    There must be an IS-A relationship (inheritance)
	
	
How is Covariant return types implemented?

Java doesn't allow the return type based overloading but JVM always allows return type based overloading. JVM uses full signature of a method for lookup/resolution. Full signature means it includes return type in addition to argument types. i.e., a class can have two or more methods differing only by return type. javac uses this fact to implement covariant return types.	

Can we declare a constructor final?

No, because constructor is never inherited.

If you overload a static method in Java, it is the example of compile time polymorphism. 

Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden method is resolved at runtime rather than compile-time. 

Static Binding and Dynamic Binding
static binding and dynamic binding in java

Connecting a method call to the method body is known as binding.

There are two types of binding

    Static Binding (also known as Early Binding).
    Dynamic Binding (also known as Late Binding).


Rule: If there is an abstract method in a class, that class must be abstract.

Rule: If you are extending an abstract class that has an abstract method, you must either provide the implementation of the method or make this class abstract.

Rule: There can be only one public class in a java source file and it must be saved by the public class name.

Note: A class cannot be private or protected except nested class.

Java Access Modifiers with Method Overriding

If you are overriding any method, overridden method (i.e. declared in subclass) must not be more restrictive.

After a string literal, all the + will be treated as string concatenation operator.

Note: Java StringBuffer class is thread-safe i.e. multiple threads cannot access it simultaneously. So it is safe and will result in an order.